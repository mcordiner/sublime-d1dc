        -:    0:Source:src/messages.c
        -:    0:Graph:src/messages.gcno
        -:    0:Data:src/messages.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *  messages.c
        -:    3: *  This file is part of LIME, the versatile line modeling engine
        -:    4: *
        -:    5: *  Copyright (C) 2006-2014 Christian Brinch
        -:    6: *  Copyright (C) 2015-2017 The LIME development team
        -:    7: *
        -:    8:TODOs:
        -:    9:	- Are all these char arguments better as pointers, or arrays of unspecified length? Do we need to specify the length?
        -:   10:	- Print a blank line of this len before each curses-style warning or message?
        -:   11:	- Wouldn't it be better if 'silent' was tested inside these functions rather than at every single point in the rest of the code where they are called?
        -:   12: */
        -:   13:
        -:   14:#include "lime.h"
        -:   15:#include <curses.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18:void
function greetings called 1 returned 100% blocks executed 100%
        1:   19:greetings(){
        -:   20:#ifdef NO_NCURSES
        -:   21:
        1:   22:  printf("*** SUBLIME - SUBlimating cometary gases in LIME, version %s\n", VERSION);
call    0 returned 100%
        -:   23:#ifdef TEST
        -:   24:  printf(">>> NOTE! Test flag is set in the Makefile. <<<\n");
        -:   25:#endif
        -:   26:#ifdef FASTEXP
        1:   27:  printf(">>> NOTE! Fast-exponential routine is enabled. <<<\n");
call    0 returned 100%
        -:   28:#endif
        -:   29:
        -:   30:#else
        -:   31:
        -:   32:  initscr();
        -:   33:  printw("*** SUBLIME - SUBlimating cometary gases in LIME, version %s\n", VERSION);
        -:   34:#ifdef TEST
        -:   35:  printw(">>> NOTE! Test flag is set in the Makefile. <<<\n");
        -:   36:#endif
        -:   37:#ifdef FASTEXP
        -:   38:  printw(">>> NOTE! Fast-exponential routine is enabled. <<<\n");
        -:   39:#endif
        -:   40:  refresh();
        -:   41:
        -:   42:#endif
        1:   43:}
        -:   44:
        -:   45:void
function greetings_parallel called 0 returned 0% blocks executed 0%
    #####:   46:greetings_parallel(int numThreads){
        -:   47:#ifdef NO_NCURSES
        -:   48:
    #####:   49:  if (numThreads>1){
branch  0 never executed
branch  1 never executed
    #####:   50:    printf("*** SUBLIME - SUBlimating cometary gases in LIME, Ver. %s (parallel running, %d threads)\n", VERSION, numThreads);
call    0 never executed
        -:   51:  } else {
    #####:   52:    printf("*** SUBLIME - SUBlimating cometary gases in LIME, Ver. %s\n", VERSION);
call    0 never executed
        -:   53:  }
        -:   54:#ifdef TEST
        -:   55:  printf(">>> NOTE! Test flag is set in the Makefile. <<<\n");
        -:   56:#endif
        -:   57:#ifdef FASTEXP
    #####:   58:  printf(">>> NOTE! Fast-exponential routine is enabled. <<<\n");
call    0 never executed
        -:   59:#endif
        -:   60:
        -:   61:#else
        -:   62:
        -:   63:  initscr();
        -:   64:  if (numThreads>1){
        -:   65:    printw("*** SUBLIME - SUBlimating cometary gases in LIME, Ver. %s (parallel running, %d threads)\n", VERSION, numThreads);
        -:   66:  } else {
        -:   67:    printw("*** SUBLIME - SUBlimating cometary gases in LIME, Ver. %s\n", VERSION);
        -:   68:  }
        -:   69:#ifdef TEST
        -:   70:  printw(">>> NOTE! Test flag is set in the Makefile. <<<\n");
        -:   71:#endif
        -:   72:#ifdef FASTEXP
        -:   73:  printw(">>> NOTE! Fast-exponential routine is enabled. <<<\n");
        -:   74:#endif
        -:   75:  refresh();
        -:   76:
        -:   77:#endif
    #####:   78:}
        -:   79:
        -:   80:void
function screenInfo called 1 returned 100% blocks executed 100%
        1:   81:screenInfo(){
        -:   82:#ifndef NO_NCURSES
        -:   83:  move(4,4);  printw("Building grid      :");
        -:   84:  move(4,51); printw("|");
        -:   85:  move(5,4);  printw("Smoothing grid     :");
        -:   86:  move(5,51); printw("|");
        -:   87:  move(7,4);  printw("Statistics         :");
        -:   88:  move(9,4);  printw("Iterations         :");
        -:   89:  move(10,4); printw("Propagating photons:");
        -:   90:  move(10,51);printw("|");
        -:   91:  move(13,4); printw("Ray-tracing model  :");
        -:   92:  move(13,51);printw("|");
        -:   93:  move(4,60); printw("|      Molecular data");
        -:   94:  move(5,60); printw("|");
        -:   95:  move(6,60); printw("|");
        -:   96:  move(7,60); printw("|");
        -:   97:  move(8,60); printw("|");
        -:   98:  move(9,60); printw("|");
        -:   99:  move(10,60); printw("|");
        -:  100:  move(11,60); printw("|");
        -:  101:  move(12,60); printw("|");
        -:  102:  move(13,60); printw("|");
        -:  103:  move(14,60); printw("|");
        -:  104:  refresh();	
        -:  105:#endif
        1:  106:}
        -:  107:
        -:  108:void
function printDone called 0 returned 0% blocks executed 0%
    #####:  109:printDone(int line){
        -:  110:#ifdef NO_NCURSES
    #####:  111:  if (line == 4)
branch  0 never executed
branch  1 never executed
    #####:  112:    printf(  "   Building grid: DONE                               \n\n"); 
call    0 never executed
    #####:  113:  else if (line == 5)
branch  0 never executed
branch  1 never executed
    #####:  114:    printf(  "   Smoothing grid: DONE                              \n\n");
call    0 never executed
    #####:  115:  else if (line == 10)
branch  0 never executed
branch  1 never executed
    #####:  116:    printf(  "   Propagating photons: DONE                         \n\n");
call    0 never executed
    #####:  117:  else if (line == 13)
branch  0 never executed
branch  1 never executed
    #####:  118:    printf(  "   Raytracing model: DONE                            \n\n");
call    0 never executed
    #####:  119:  else if (line == 15)
branch  0 never executed
branch  1 never executed
    #####:  120:    printf("\n   Writing fits file: DONE                           \n\n");
call    0 never executed
        -:  121:
        -:  122:#else
        -:  123:  move(line,52); printw(" [ok]");
        -:  124:  refresh();
        -:  125:#endif
    #####:  126:}
        -:  127:
        -:  128:void
function progressbar called 0 returned 0% blocks executed 0%
    #####:  129:progressbar(double percent, int line){
        -:  130:#ifdef NO_NCURSES
    #####:  131:  if (line == 4)
branch  0 never executed
branch  1 never executed
    #####:  132:    printf("   Building grid: %.2f percent done\r", percent * 100.);
call    0 never executed
    #####:  133:  else if (line == 5){
branch  0 never executed
branch  1 never executed
    #####:  134:    printf("   Smoothing grid: %.2f percent done\r", percent * 100.);
call    0 never executed
    #####:  135:    fflush(stdout);
call    0 never executed
        -:  136:    }
    #####:  137:  else if (line == 10)
branch  0 never executed
branch  1 never executed
    #####:  138:    printf("   Propagating photons: %.2f percent done\r", percent * 100.);
call    0 never executed
    #####:  139:  else if (line == 13)
branch  0 never executed
branch  1 never executed
    #####:  140:    printf("   Raytracing model: %.2f percent done\r", percent * 100.);
call    0 never executed
    #####:  141:  else if (line == 15)
branch  0 never executed
branch  1 never executed
    #####:  142:    printf("   Writing fits file\n");
call    0 never executed
        -:  143:
        -:  144:#else
        -:  145:  int i;
        -:  146:  for(i=0;i<(int)(percent*25.);i++){
        -:  147:    move(line,25+i);
        -:  148:    printw("#");
        -:  149:  }
        -:  150:  refresh();
        -:  151:#endif
    #####:  152:}
        -:  153:
        -:  154:void
function progressbar2 called 0 returned 0% blocks executed 0%
    #####:  155:progressbar2(configInfo *par, int flag, int prog, double percent, double minsnr, double median){
        -:  156:#ifdef NO_NCURSES
    #####:  157:  if (flag == 0) {
branch  0 never executed
branch  1 never executed
    #####:  158:    printf("  Iteration %i / max %i: Starting\n", prog + 1, par->nSolveIters);
call    0 never executed
    #####:  159:  } else if (flag == 1){
branch  0 never executed
branch  1 never executed
    #####:  160:    if (minsnr < 1000)
branch  0 never executed
branch  1 never executed
    #####:  161:      printf("      Statistics: Min(SNR)    %3.3f                     \n", minsnr); 
call    0 never executed
        -:  162:    else 
    #####:  163:      printf("      Statistics: Min(SNR)    %.3e                      \n", minsnr);
call    0 never executed
        -:  164:
    #####:  165:    if (median < 1000)
branch  0 never executed
branch  1 never executed
    #####:  166:      printf("      Statistics: Median(SNR) %3.3f                     \n", median);
call    0 never executed
        -:  167:    else 
    #####:  168:      printf("      Statistics: Median(SNR) %.3e                      \n", median);
call    0 never executed
        -:  169:
    #####:  170:    printf("  Iteration %i / max %i: DONE\n\n", prog+1, par->nSolveIters);
call    0 never executed
        -:  171:  }
        -:  172:
        -:  173:#else
        -:  174:  if (flag == 0) {
        -:  175:    move(9,25+prog); printw("#");
        -:  176:    if(percent<100) {
        -:  177:      move(10,25); printw("                         ");
        -:  178:    }
        -:  179:    refresh();
        -:  180:  } else if (flag == 1){
        -:  181:    move(7,38); printw("                    ");            
        -:  182:    move(8,38); printw("                    ");
        -:  183:    if(minsnr<1000){
        -:  184:      move(7,25); printw("Min(SNR)    %3.3f", minsnr);
        -:  185:    } else {
        -:  186:      move(7,25); printw("Min(SNR)    %.3e", minsnr);
        -:  187:    }
        -:  188:    if(median<1000){
        -:  189:      move(8,25); printw("Median(SNR) %3.3f", median);
        -:  190:    } else {
        -:  191:      move(8,25); printw("Median(SNR) %.3e", median);
        -:  192:    }
        -:  193:    refresh();
        -:  194:  }
        -:  195:#endif
    #####:  196:}
        -:  197:
function casaStyleProgressBar called 0 returned 0% blocks executed 0%
    #####:  198:void casaStyleProgressBar(const int maxI, int i){
        -:  199:  static int minorCounter=0,majorCounter=0;
        -:  200:  static float counter=0.0;
        -:  201:  const int minorsPerMajor=5, maxMajor=10, minorInterval=2; /* product must be 100 */
        -:  202:  int percentI;
        -:  203:
    #####:  204:  while (counter<=i){
branch  0 never executed
branch  1 never executed
        -:  205:    /* decide whether to print minor or major symbol. */
    #####:  206:    if (minorCounter==majorCounter){
branch  0 never executed
branch  1 never executed
    #####:  207:      percentI = minorCounter*minorInterval;
    #####:  208:      if (percentI==100){
branch  0 never executed
branch  1 never executed
    #####:  209:        printf("%d%%\n", percentI);
call    0 never executed
        -:  210:      }else{
    #####:  211:        printf("%d%%", percentI);
call    0 never executed
    #####:  212:        fflush(stdout);
call    0 never executed
        -:  213:      }
        -:  214:
    #####:  215:      majorCounter += minorsPerMajor;
        -:  216:    } else { /* assume minorCounter<majorCounter, because I can't see how it could be >! */
    #####:  217:      printf(".");
call    0 never executed
    #####:  218:      fflush(stdout);
call    0 never executed
        -:  219:    }
        -:  220:
    #####:  221:    minorCounter++;
    #####:  222:    counter = (maxI-1)*(minorCounter/(float)(minorsPerMajor*maxMajor));
        -:  223:  }
    #####:  224:}
        -:  225:
        -:  226:void
function reportOutput called 1 returned 100% blocks executed 100%
        1:  227:reportOutput(char filename[STR_LEN_0]){
        -:  228:#ifdef NO_NCURSES
        1:  229:  printf("Output written to %s\n", filename);
call    0 returned 100%
        -:  230:#else
        -:  231:  move(14,4); printw("Output written to %s", filename);
        -:  232:  refresh();
        -:  233:#endif
        1:  234:}
        -:  235:
        -:  236:void
function goodnight called 1 returned 100% blocks executed 100%
        1:  237:goodnight(int initime){
        1:  238:  int runtime=time(0)-initime;
call    0 returned 100%
        -:  239:#ifdef NO_NCURSES
        1:  240:  printf("*** Program ended successfully               \n");
call    0 returned 100%
        1:  241:  printf("    Runtime: %3dh %2dm %2ds\n\n", runtime / 3600, runtime / 60 % 60, runtime % 60);
call    0 returned 100%
        -:  242:
        -:  243:#else
        -:  244:  move(22,0); printw("*** Program ended successfully               ");
        -:  245:  move(22,58); printw("runtime: %3dh %2dm %2ds", runtime/3600, runtime/60%60, runtime%60);
        -:  246:  move(23,0); printw("*** [Press any key to quit]");
        -:  247:  refresh();
        -:  248:  getch();
        -:  249:  endwin();
        -:  250:#endif
        1:  251:}
        -:  252:
        -:  253:void
function printMessage called 0 returned 0% blocks executed 0%
    #####:  254:printMessage(char *message){
        -:  255://printMessage(char message[STR_LEN_0]){
        -:  256:#ifdef NO_NCURSES
    #####:  257:  if(strlen(message)>0)
branch  0 never executed
branch  1 never executed
        -:  258:    {
    #####:  259:      printf("%s\n", message );
call    0 never executed
        -:  260:    }
        -:  261:#else
        -:  262:  move(22,0); printw("*** %s\n",message);
        -:  263:  refresh();
        -:  264:#endif
    #####:  265:}
        -:  266:
        -:  267:void
function warning called 2 returned 100% blocks executed 100%
        2:  268:warning(char *message){
        -:  269://warning(char message[STR_LEN_0]){
        -:  270:#ifdef NO_NCURSES
        2:  271:  if(strlen(message)>0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  272:    {
        2:  273:      printf("Warning : %s\n", message );
call    0 returned 100%
        -:  274:    }
        -:  275:#else
        -:  276:  move(22,0); printw("*** %s\n",message);
        -:  277:  refresh();
        -:  278:#endif
        2:  279:}
        -:  280:
function error called 0 returned 0% blocks executed 0%
    #####:  281:void error(char message[STR_LEN_0]){
    #####:  282:  if(!silent) bail_out(message);
branch  0 never executed
branch  1 never executed
    #####:  283:  exit(1);
        -:  284:}
        -:  285:
        -:  286:void
function bail_out called 0 returned 0% blocks executed 0%
    #####:  287:bail_out(char *message){
        -:  288://bail_out(char message[STR_LEN_0]){
        -:  289:#ifdef NO_NCURSES
    #####:  290:  printf("Error: %s\n", message );
call    0 never executed
call    1 never executed
        -:  291:#else
        -:  292:  move(22,0); printw("*** %s",message);
        -:  293:  move(23,0); printw("*** [Press any key to quit]");
        -:  294:  refresh();
        -:  295:  getch();
        -:  296:  endwin();
        -:  297:#endif
    #####:  298:}
        -:  299:
        -:  300:void
function collpartmesg called 0 returned 0% blocks executed 0%
    #####:  301:collpartmesg(char molecule[STR_LEN_0], int partners){//, int specnumber){
        -:  302:#ifdef NO_NCURSES
    #####:  303:  printf("\n   Molecule: %.25s\n", molecule);
call    0 never executed
    #####:  304:  if (partners==1)
branch  0 never executed
branch  1 never executed
    #####:  305:    printf("   %d collision partner:\n", partners);
call    0 never executed
        -:  306:  else
    #####:  307:    printf("   %d collision partners:\n", partners);
call    0 never executed
        -:  308:
        -:  309:#else
        -:  310:  move(6,63); printw("%.25s", molecule);
        -:  311:  move(7,63);
        -:  312:  if (partners==1)
        -:  313:    printw("%d collision partner:", partners);
        -:  314:  else
        -:  315:    printw("%d collision partners:", partners);
        -:  316:
        -:  317:  refresh();
        -:  318:#endif
    #####:  319:}
        -:  320:
        -:  321:void
function collpartmesg2 called 0 returned 0% blocks executed 0%
    #####:  322:collpartmesg2(char name[10]){
        -:  323:#ifdef NO_NCURSES
    #####:  324:  printf("      %s\n ", name);
call    0 never executed
        -:  325:#else
        -:  326:  move(8,63); printw("%s ",name);
        -:  327:  refresh();
        -:  328:#endif
    #####:  329:}
        -:  330:
        -:  331:void
function collpartmesg3 called 0 returned 0% blocks executed 0%
    #####:  332:collpartmesg3(int number, int flag){
        -:  333:#ifdef NO_NCURSES
    #####:  334:  if (number==1)
branch  0 never executed
branch  1 never executed
    #####:  335:    printf("   Model provides: %d density profile\n\n", number);
call    0 never executed
        -:  336:  else
    #####:  337:    printf("   Model provides: %d density profiles\n\n", number);
call    0 never executed
        -:  338:
    #####:  339:  if(flag==1) printf("*** Warning! ***: Too few density profiles");  
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  340:#else
        -:  341:  move(10,63); printw("Model provides:");
        -:  342:  move(11,63);
        -:  343:  if (number==1)
        -:  344:    printw("%d density profile", number);
        -:  345:  else
        -:  346:    printw("%d density profiles", number);
        -:  347:
        -:  348:  if(flag==1) {
        -:  349:    move(13,63); printw("*** Warning! ***");
        -:  350:    move(14,63); printw("Too few density profiles");
        -:  351:  }
        -:  352:  refresh();
        -:  353:#endif
    #####:  354:}
        -:  355:
        -:  356:void
function processFitsError called 0 returned 0% blocks executed 0%
    #####:  357:processFitsError(int status){
        -:  358:  /*****************************************************/
        -:  359:  /* Print out cfitsio error messages and exit program */
        -:  360:  /*****************************************************/
        -:  361:
    #####:  362:  if(status){
branch  0 never executed
branch  1 never executed
    #####:  363:    if(!silent){
branch  0 never executed
branch  1 never executed
        -:  364:#ifdef NO_NCURSES
    #####:  365:      fits_report_error(stderr, status); /* print error report */
call    0 never executed
        -:  366:#else
        -:  367:      char message[STR_LEN_0];
        -:  368:      sprintf(message, "Error in cfitsio: status=%d", status);
        -:  369:      bail_out(message);
        -:  370:#endif
        -:  371:    }
    #####:  372:    exit( status );    /* terminate the program, returning error status */
call    0 never executed
        -:  373:  }
    #####:  374:  return;
        -:  375:}
        -:  376:
