        -:    0:Source:src/defaults.c
        -:    0:Graph:src/defaults.gcno
        -:    0:Data:src/defaults.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: *  defaults.c
        -:    3: *  This file is part of LIME, the versatile line modeling engine
        -:    4: *
        -:    5: *  Copyright (C) 2006-2014 Christian Brinch
        -:    6: *  Copyright (C) 2015-2017 The LIME development team
        -:    7: *
        -:    8: */
        -:    9:
        -:   10:#include <math.h>
        -:   11:#include "defaults.h" /* includes lime_config.h which defines configInfo */
        -:   12:#include "ufunc_types.h" /* for the USERFUNC_* macros */
        -:   13:
        -:   14:void
function default_density called 0 returned 0% blocks executed 0%
    #####:   15:default_density(double x, double y, double z, double *density){
    #####:   16:  density[0] = 0.0;
    #####:   17:  defaultFuncFlags |= (1 << USERFUNC_density);
    #####:   18:}
        -:   19:
        -:   20:void
function default_temperature called 0 returned 0% blocks executed 0%
    #####:   21:default_temperature(double x, double y, double z, double *temperature){
    #####:   22:  temperature[0] = 0.0;
    #####:   23:  temperature[1] = 0.0;
    #####:   24:  defaultFuncFlags |= (1 << USERFUNC_temperature);
    #####:   25:}
        -:   26:
        -:   27:void
function default_abundance called 1 returned 100% blocks executed 100%
        1:   28:default_abundance(double x, double y, double z, double *abundance){
        1:   29:  abundance[0] = -1.0;
        1:   30:  defaultFuncFlags |= (1 << USERFUNC_abundance);
        1:   31:}
        -:   32:
        -:   33:void
function default_molNumDensity called 0 returned 0% blocks executed 0%
    #####:   34:default_molNumDensity(double x, double y, double z, double *dummy){
    #####:   35:  dummy[0] = -1.0;
    #####:   36:  defaultFuncFlags |= (1 << USERFUNC_molNumDensity);
    #####:   37:}
        -:   38:
        -:   39:void
function default_doppler called 0 returned 0% blocks executed 0%
    #####:   40:default_doppler(double x, double y, double z, double *doppler){
    #####:   41:  *doppler = 0.0;
    #####:   42:  defaultFuncFlags |= (1 << USERFUNC_doppler);
    #####:   43:}
        -:   44:
        -:   45:void
function default_velocity called 0 returned 0% blocks executed 0%
    #####:   46:default_velocity(double x, double y, double z, double *vel){
    #####:   47:  vel[0] = 0.0;
    #####:   48:  vel[1] = 0.0;
    #####:   49:  vel[2] = 0.0;
        -:   50://*** probably not good to hard-wire DIM to 3 in this way.
    #####:   51:  defaultFuncFlags |= (1 << USERFUNC_velocity);
    #####:   52:}
        -:   53:
        -:   54:void
function default_magfield called 1 returned 100% blocks executed 100%
        1:   55:default_magfield(double x, double y, double z, double *B){
        1:   56:  B[0]=0.0;
        1:   57:  B[1]=0.0;
        1:   58:  B[2]=0.0;
        1:   59:  defaultFuncFlags |= (1 << USERFUNC_magfield);
        1:   60:}
        -:   61:
        -:   62:void
function default_gasIIdust called 501 returned 100% blocks executed 100%
      501:   63:default_gasIIdust(double x, double y, double z, double *gas2dust){
      501:   64:  *gas2dust=100.;
      501:   65:  defaultFuncFlags |= (1 << USERFUNC_gasIIdust);
      501:   66:}
        -:   67:
        -:   68:double
function default_gridDensity called 501 returned 100% blocks executed 100%
      501:   69:default_gridDensity(configInfo *par, double *r, void (*density)(double x, double y, double z, double *val)){
        -:   70:  /*
        -:   71:The grid points within the model are chosen randomly via the rejection method with a probability distribution which the present function is intended to provide.
        -:   72:
        -:   73:Notes:
        -:   74:  - The present function is interpreted by LIME as giving *relative* probabilities, the ultimate normalization being set by the desired number of grid points conveyed to the task via par->pIntensity.
        -:   75:  - If par->samplingAlgorithm is chosen to be zero (the current default value), further manipulations to the probability distribution are performed according to the set value of par->sampling.
        -:   76:  - The user may supply their own version of the present function within model.c; the default here implements the grid-point selection function used in LIME<=1.5.
        -:   77:  */
        -:   78:  double val[99],totalDensity=0.0,rSquared=0.0,fracDensity=0.0;
        -:   79:  int i;
        -:   80:
      501:   81:  rSquared = r[0]*r[0]+r[1]*r[1]+r[2]*r[2];
      501:   82:  if(rSquared>=par->radiusSqu)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   83:    return 0.0;
        -:   84:
      501:   85:  density(r[0],r[1],r[2],val);
call    0 returned 100%
     1001:   86:  for (i=0;i<par->numDensities;i++) totalDensity += val[i];
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      501:   87:  fracDensity = pow(totalDensity,defaultDensyPower)/par->gridDensGlobalMax;
        -:   88:
      501:   89:  defaultFuncFlags |= (1 << USERFUNC_gridDensity);
        -:   90:
      501:   91:  return fracDensity;
        -:   92:}
        -:   93:
